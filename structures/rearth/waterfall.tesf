str topBlock = "minecraft:tuff";
str wallBlock = "minecraft:mossy_cobblestone";
str waterBlock = "minecraft:water";
str flowingWaterBlock = "minecraft:water[level=8]";
str airBlock = "minecraft:air";
num width = 1;
num length = 4;
num inwardLength = -3;
num downwardsMaxSearch = 50;

num dirX = 0;
num dirZ = 0;

if (getBlock(1, 0, 0) == "minecraft:stone") {
    dirX = -1;
    if (getBlock(0, 0, -1) == "minecraft:stone" || getBlock(0, 0, 1) == "minecraft:stone") {
        fail;
    }
} else if (getBlock(-1, 0, 0) == "minecraft:stone") {
    if (getBlock(0, 0, -1) == "minecraft:stone" || getBlock(0, 0, 1) == "minecraft:stone") {
        fail;
    }
    dirX = 1;
} else if (getBlock(0, 0, 1) == "minecraft:stone") {
    if (getBlock(1, 0, 0) == "minecraft:stone" || getBlock(-1, 0, 0) == "minecraft:stone") {
        fail;
    }
    dirZ = -1;
} else if (getBlock(0, 0, -1) == "minecraft:stone") {
    if (getBlock(1, 0, 0) == "minecraft:stone" || getBlock(-1, 0, 0) == "minecraft:stone") {
        fail;
    }
    dirZ = 1;
}

// floor
for (num j = -width; j <= width; j = j + 1) {
    for (num i = inwardLength; i <= length; i = i + 1) {

        str usedBlock = topBlock;
        if (randomInt(5) > 3) {
            usedBlock = wallBlock;
        }

        block(dirX * i + dirZ * j, 0, dirZ * i + dirX * j, usedBlock);
        block(dirX * i + dirZ * j, 1, dirZ * i + dirX * j, waterBlock);
        block(dirX * i + dirZ * j, 2, dirZ * i + dirX * j, airBlock);
            for (num k = 1; k <= (length - i) / 2; k = k + 1) {
                
                if (randomInt(5) > 3) {
                    usedBlock = wallBlock;
                }
                block(dirX * i + dirZ * j, -k, dirZ * i + dirX * j, usedBlock);
            }
    }
}

// wall
for (num j = -width - 1; j <= width + 1; j = j + 1) {
    if ((j == -width - 1) || (j == width + 1)) {
        for (num i = inwardLength; i <= length; i = i + 1) {

            str usedBlock = topBlock;
            if (randomInt(5) > 3) {
                usedBlock = wallBlock;
            }

            block(dirX * i + dirZ * j, 1, dirZ * i + dirX * j, usedBlock);
        }
    }
}

// waterfall itself
num fails = 0;

for (num j = -1; j <= downwardsMaxSearch; j = j + 1) {

    num offset = length + 1;

    if (getBlock(dirX * offset, -j, dirZ *  offset) != "minecraft:air") {
        fails = fails + 1;
        if (fails > 3) {
            break;
        }
    }

    for (num i = -width; i <= width; i = i + 1) {
        block(dirX * offset + dirZ * i, -j, dirZ * offset + dirX * i, flowingWaterBlock, true);
    }
}