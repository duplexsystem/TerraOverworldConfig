num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 14+randomInt(6);
str trunkBlock = "minecraft:dark_oak_log";
num sideBranchInterval = 1;
num sideBranchMinHeight = 6+randomInt(2);
num sideBranchLengthMin = 7+randomInt(5);
num sideBranchLengthVariation = 2;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 0.3+randomInt(randPrecision)/randPrecision/2;
num sideBranchLeafRadiusMin = 5;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 2;
num sideBranchLeafBottomFlatness = 3;
num sideBranchLeafDensity = 1;
// str sideBranchLeafBlock = "minecraft:air";
str sideBranchLeafBlock = "minecraft:dark_oak_leaves[distance=2,persistent=false]";
str sideBranchBlockX = "minecraft:dark_oak_log[axis=x]";
str sideBranchBlockY = "minecraft:dark_oak_log[axis=y]";
str sideBranchBlockZ = "minecraft:dark_oak_log[axis=z]";

num topBranches = 6 + randomInt(3);
num topBranchLengthUpwardsMin = 7+randomInt(4);
num topBranchLengthOutwardsMin = 6+randomInt(14);
num topBranchVerticalDirection = 0.3;
num topBranchLeafRadiusMin = 6;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 2;
num topBranchLeafBottomFlatness = 4;
num topBranchLeafDensity = 0.8;
str topBranchLeafBlock = "minecraft:dark_oak_leaves[distance=3,persistent=false]";
// str topBranchLeafBlock = "minecraft:air";

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = -6; i < trunkHeight; i = i + 1) {
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval + randomInt(2) == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
            dx = dx/mag;
            dy = dy/mag;
            dz = dz/mag;
            // Branch origin
            num ox = 0;
            num oy = i;
            num oz = 0;
            // Set branch block based on largest unsigned vector component
            str branchBlock = sideBranchBlockY;
            if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
            else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
            num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
            // Generate branch
            for (num l = 0; l <= branchLength; l = l + 1) {
                block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
                block(l*dx+ox, l*dy+oy - 1, l*dz+oz, branchBlock);
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            num radius = sideBranchLeafRadiusMin;
            num radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num leafClusterOffset = branchLength - 1;
            num lox = ox+leafClusterOffset*dx;
            num loy = oy+leafClusterOffset*dy + sideBranchLeafTranslate;
            num loz = oz+leafClusterOffset*dz;

            // spread wood around end to prevent leave decay
            for (num l = -3; l <= 3; l = l + 1) {
                if (l == 0) {
                    continue;
                }
                block(lox + l, loy, loz, sideBranchBlockX);
                block(lox, loy, loz + l, sideBranchBlockZ);
            }

            // generate leave cluster
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius/sideBranchLeafBottomFlatness); cy <= ceil(radius/sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                        if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < sideBranchLeafDensity) {
                            block(lox+cx, loy+cy, loz+cz, sideBranchLeafBlock, false);
                        }
                    }
                }
            }
        }
    }

    num trunkRadius = 2;
    num baseHeight = 3;
    num radiusMax = 2.6;

    num baseWidth = min(max(-i + baseHeight, 0), radiusMax) / 2.4;
    num baseAddWidth = round(baseWidth);
    num usedRadius = trunkRadius + baseAddWidth;
    num trunkLevelRadiusInnerSquared = pow2(trunkRadius + baseWidth - 0.8);

    // trunk placement
    for (num x = -usedRadius; x < usedRadius; x = x + 1) {
        for (num z = -usedRadius; z < usedRadius; z = z + 1) {
            num distanceSquared = pow2(x)+pow2(z);
            if (distanceSquared < trunkLevelRadiusInnerSquared) {
                block(x, i, z, trunkBlock, false);
            }
        }
    }


}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = sideBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate branch
    for (num l = 0; l <= branchLength; l = l + 1) {
        block(l*dx+ox, l*dy+oy, l*dz+oz, branchBlock);
        block(l*dx+ox, l*dy+oy - 1, l*dz+oz, branchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);

    // Leaf cluster origin (end of branch)
    num leafClusterOffset = branchLength - 1;
    num lox = ox+leafClusterOffset*dx;
    num loy = oy+leafClusterOffset*dy + topBranchLeafTranslate;
    num loz = oz+leafClusterOffset*dz;

    // spread wood around end to prevent leave decay
    for (num l = -4; l <= 4; l = l + 1) {
        if (l == 0) {
            continue;
        }
        block(lox + l, loy, loz, sideBranchBlockX);
        block(lox, loy, loz + l, sideBranchBlockZ);
    }

    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius/topBranchLeafBottomFlatness); cy <= ceil(radius/topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx,2)+pow(cy*squashFactor,2)+pow(cz,2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision)/randPrecision < topBranchLeafDensity) {
                    block(lox+cx, loy+cy, loz+cz, topBranchLeafBlock, false);
                }
            }
        }
    }
}

block(0, -1, 0, "minecraft:dirt");